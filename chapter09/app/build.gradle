apply plugin: 'com.android.application'
apply from: 'version.gradle'

//获取local.properties的内容
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

android {
    compileSdkVersion 26
    useLibrary('org.apache.http.legacy')
    //Android Gradle提供来将库添加到classpath中，方便我们在代码中使用
    flavorDimensions "versionCode"

    defaultConfig {
        applicationId "com.example.app"
        minSdkVersion 23
        targetSdkVersion 26
        versionCode appVersionCode
        versionName appVersionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        dimension 'versionCode'
    }

    // 签名文件
    signingConfigs {
        release {
            //release签名
            //local.properties
            storeFile file(properties.getProperty("keystroe_storeFile"))
            storePassword properties.getProperty("keystroe_storePassword")
            keyAlias properties.getProperty("keystroe_keyAlias")
            keyPassword properties.getProperty("keystroe_keyPassword")
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        google {
            dimension 'versionCode'
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all { each ->
            if (each != null//output File is not null
                    && variant.name.endsWith('.apk')//output File is a apk
                    && 'release' == variant.buildType.name) {
                outputFileName = "app-${flavorName}-V${variant.versionName}-${buildTime()}.apk"
                println(outputFileName)
            }
        }
    }
}

static def buildTime() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}

/*
* Project`s Method exec {commandLine;args} for shell command
* get AppVersionName from git tag
* @return git tag`s Name
* */
/*def getAppVersionName() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--abbrev=0', '--tag'
        standardOutput = stdout
    }
    return stdout.toString()
}*/

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

apply plugin: 'com.android.application'
apply from: 'version.gradle'

//获取local.properties的内容
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

android {
    compileSdkVersion 26
    useLibrary('org.apache.http.legacy')
    //Android Gradle提供来将库添加到classpath中，方便我们在代码中使用
    flavorDimensions "versionCode"

    defaultConfig {
        applicationId "com.example.app"
        minSdkVersion 23
        targetSdkVersion 26
        versionCode appVersionCode
        versionName appVersionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        dimension 'versionCode'
    }

    // 签名文件
    signingConfigs {
        //将签名文件和密钥信息放到服务器上
        //使用环境变量在打包的时候读取该值
        //如果读取不到该值便使用默认的android 的debug的密钥和签名信息配置
        def appStoreFile = System.getenv("STORE_FILE")
        def appStorePassword = System.getenv("STORE_PASSWORD")
        def appKeyAlias = System.getenv("KEY_ALIAS")
        def appKeyPassword = System.getenv("KEY_PASSWORD")

        if (!appStoreFile || !appStorePassword || !appKeyAlias || !appKeyPassword) {
            appStoreFile = "debug.keystore"
            appStorePassword = "android"
            appKeyAlias = "android"
            appKeyPassword = "androiddebugkey"
        }

        debug {
            storeFile file(appStoreFile)
            storePassword appStorePassword
            keyAlias appKeyAlias
            keyPassword appKeyPassword
        }

        release {
            //release签名
            //local.properties
            storeFile file(properties.getProperty("keystroe_storeFile"))
            storePassword properties.getProperty("keystroe_storePassword")
            keyAlias properties.getProperty("keystroe_keyAlias")
            keyPassword properties.getProperty("keystroe_keyPassword")
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            zipAlignEnabled true
            //Config shrinkResources should set minifyEnabled first.
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        google {
            resValue 'string', 'channel_tips', 'google is welcome!'
            buildConfigField 'String', "WEB_URL", '"www.google.com"'
        }
        baidu {
            resValue 'string', 'channel_tips', 'baidu is welcome!'
            buildConfigField 'String', "WEB_URL", '"www.baidu.com"'
        }
    }

    productFlavors.all { flavor ->
        manifestPlaceholders.put("NEXUSUNSKY", name)
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all { each ->
            if (each != null//output File is not null
                    && variant.name.endsWith('.apk')//output File is a apk
                    && 'release' == variant.buildType.name) {
                outputFileName = "app-${flavorName}-V${variant.versionName}-${buildTime()}.apk"
                println(outputFileName)
            }
        }
    }

    adbOptions {
        timeOutInMs = 5 * 1000//5 seconds
        installOptions '-r', '-s'
    }

    dexOptions {
        javaMaxHeapSize '4g'
        threadCount 2
    }
}

static def buildTime() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}

/*
* Project`s Method exec {commandLine;args} for shell command
* get AppVersionName from git tag
* @return git tag`s Name
* */
/*def getAppVersionName() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--abbrev=0', '--tag'
        standardOutput = stdout
    }
    return stdout.toString()
}*/

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

//Closure is a Anonymous Method
task configClosure << {
    person {
        personName = 'zhangsan'
        personAge = 20
        dumpPerson()
    }
}

class Person1 {
    String personName
    int personAge

    def dumpPerson() {
        println "personName is ${personName},personAge is ${personAge}"
    }
}

def dumpPerson() {
    println "I am this.dumpPerson() Test for priority of delegate"
}

def person(Closure<Person1> closure) {
    Person1 p1 = new Person1();
    closure.delegate = p1
    //Delegate First
    closure()
    closure.setResolveStrategy(Closure.DELEGATE_FIRST);
    closure(p1)
}

task helloDelegate << {
    new Delegate().test {
        println "thisObject : ${thisObject.getClass()}"
        println "      this : ${this.getClass()}"
        println ''
        println "     owner : ${owner.getClass()}"
        println "  delegate : ${delegate.getClass()}"
        println ''

        method2()
        it.method2()
    }
}

def method2() {
    println "Context this : ${this.getClass().name} in root"
    println "method2 in root"
}

class Delegate {
    def method2() {
        println "Delegate this : ${this.getClass().name} in Delegate"
        println "method2 in Delegate"
    }

    def test(Closure<Delegate> closure) {
        closure(this)
    }
}

//Closure is a Block of codes it's feature(flexible,light,reusable) 
task helloClosure << {
    //single param in closure
    customEach {
        println it
    }

    //multi param in closure
    eachMap { k, v ->
        println "${k} is ${v}"
    }
}

def eachMap(closure) {
    def map = ["name": "", "age": "17"]
    map.each {
        closure(it.key, it.value)
    }
}

//Define CLosura Just One Param(Closure)
//call Closure by 'closure()'
def customEach(closure) {
    //模拟一个有十个元素的集合，迭代
    for (int i in 1..10) {
        closure(i)
    }
}

task helloJavaBean << {
    Person p = new Person()

    println "name is ${p.name}"
    p.name = "LiSi"
    println "name is ${p.name}"

    println "age is ${p.age}"
}

class Person {
    private String name;

    public int getAge() {
        17
    }
}

task closetInMethod << {
    def numlist = [1, 2, 3, 4, 5, 6];

    numlist.each({ println it })//Raw of Closet

    numlist.each() {//Groovy said : Closet can out of brackets like this
        println it
    }

    numlist.each {//eventually we can ignore brackets
        println it
    }
}

task printMethodReturn << {
    def add1 = method1 2, 3
    def add2 = method1 5, 8
    println "add1:${add1},add2:${add2}"
}

def method1(int a, int b) {
    if (a > b) {
        a
    } else {
        b
    }
}

task testMethod << {
    method(1, 2)
    method 1, 2
}

def method(int a, int b) {
    println a + b
}

task printMap << {
    def valMap = ['width': 12, 'height': 34]
    println valMap.getClass().name

    println valMap['width'] // Get Value of key
    println valMap.height

    valMap.each {
        println "Key:${it.key},Val:${it.value}"
    }
}

task printListEach << {
    //Iterator the list throught 
    def numlist = [1, 2, 3, 4, 5, 6];
    println numlist.getClass().name
    println numlist[1]//the second item
    println numlist[-1]//the last item
    println numlist[-2]//the last second
    println numlist[1..3]//the last two to four 

    numlist.each {
        println it
    }
}

task printTestList << {
    def numlist = [1, 2, 3, 4, 5, 6];
    println numlist.getClass().name
    println numlist[1]//the second item
    println numlist[-1]//the last item
    println numlist[-2]//the last second
    println numlist[1..3]//the last two to four 
}

task printStringVar << {
    def name = 'Nexusunsky'
    println 'singlequote algorithms:${name}'
    println "doublequote define:$name"
}

task printStringClass << {
    def str1 = 'single quote'
    def str2 = "double quote"
    println 'singlequote define:' + str1.getClass().name
    println "doublequote define:" + str2.getClass().name
}

task hello {
    doLast {
        println 'Hello World!'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.5.1'
    archiveBase = 'GRADLE_USER_HOME'
    archivePath = 'wrapper/dists'
    distributionBase = 'GRADLE_USER_HOME'
    distributionPath = 'wrapper/dists'
    distributionUrl = 'https://services.gradle.org/distributions/gradle-4.5.1-all.zip'
}

task printlog << {
    logger.quiet('quiet Log.')
    logger.error('error Log.')
    logger.warn('warn Log.')
    logger.lifecycle('lifecycle Log.')
    logger.info('info Log.')
    logger.debug('debug Log.')
}